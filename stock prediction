
import comp140_module3 as stocks
import random


def markov_chain(data, order):
    """
    Creates a Markov chain with the given order from the given data.

    Inputs:
        - data:  a list of ints or floats representing previously collected data
        - order: an integer repesenting the desired order of the markov chain

    Returns: a dictionary that represents the Markov chain
    """
    emptydict = {}

    if len(data) < (order+1):
        return emptydict

    
    state = data[:order]
    for val in data[order:]:
        statetp = tuple(state)
        if statetp not in emptydict:
            emptydict[statetp] = {}
        if val not in emptydict[statetp]:
            emptydict[statetp][val] = 0   
        emptydict[statetp][val] += 1
        state = state[1:]
        state.append(val)
    for value in emptydict.values():
        total = sum(value.values())
        for item in value:
            value[item] = value[item] / total
    return emptydict
        
        




def weighted(choices):
    """
I made a random weighted choice to use for predict function below. 
Choices are a dictionary which the keys are choices and values
are the probability of selecting the choice. 
   """
    randval = random.random()
    ssum = 0.0
    for choice in choices:
        ssum += choices[choice]
        if randval < ssum:
            return choice
    return None


def predict(model, last, num):
    """
    Predicts the next num values given the model and the last values.

    Inputs:
        - model: a dictionary representing a Markov chain
        - last:  a list (with length of the order of the Markov chain)
                 representing the previous states
        - num:   an integer representing the number of desired future states

    Returns: a list of integers that are the next num states
    """
    #Corresponding to the bins 0~3
    equalw = {}
    for nbin in range(4):
        equalw[nbin] = 0.25

    predictions = []
    state = list(last)
    for dummy_trial in range(num):
        statetp = tuple(state)
        if statetp in model:
            prob = model[tuple(state)]
        else:
            prob = equalw
        choice = weighted(prob)
        predictions.append(choice)
        state = state[1:]
        state.append(choice)
    return predictions

    


def mse(result, expected):
    """
    Calculates the mean squared error between two data sets. We'll assume that
    the length of the inputs (result and expected) are the same.

    Inputs:
        - result: a list of integers or floats representing the actual output
        - expected: a list of integers or floats representing the predicted output

    Returns: a float that is the mean squared error between the two data sets
    """
    sum_squares = 0
    for num1, num2 in zip(result, expected):
        sum_squares += (num1 - num2) ** 2
    err = sum_squares / len(expected)
    return err


def run_experiment(train, order, test, future, actual, trials):
    """
    Runs an experiment to predict the future of the test data.

    Inputs:
        - train:  a list of integers representing past stock price data
        - order:  an integer representing the order of the markov chain
                  that will be used
        - test:   a list of integers of length "order" representing past
                  stock price data (different time period than "train")
        - future: an integer representing the number of future days to
                  predict
        - actual: a list representing the actual results for the next
                  "future" days
        - trials: an integer representing the number of trials to run

    Returns: a float that is the mean squared error over the number of trials
    """
    model = markov_chain(train, order)
    error = 0
    for dummy in range(trials):
        pred = predict(model, test, future)
        error += mse(pred, actual)
    return error / trials


def run():
    """
    Runs the stock prediction application.

    You should not modify this function! However, feel free to look it over
    to make sure that you understand what it's doing.
    """
    # Get the supported stock symbols
    symbols = stocks.get_supported_symbols()

    # Load the training data
    changes = {}
    bins = {}
    for symbol in symbols:
        prices = stocks.get_historical_prices(symbol)
        changes[symbol] = stocks.compute_daily_change(prices)
        bins[symbol] = stocks.bin_daily_changes(changes[symbol])

    # Load the test data
    testchanges = {}
    testbins = {}
    for symbol in symbols:
        testprices = stocks.get_test_prices(symbol)
        testchanges[symbol] = stocks.compute_daily_change(testprices)
        testbins[symbol] = stocks.bin_daily_changes(testchanges[symbol])

    # Display data
    stocks.plot_daily_change(changes)
    stocks.plot_bin_histogram(bins)

    # Run experiments
    orders = [1, 3, 5, 7, 9]
    ntrials = 500
    days = 5

    for symbol in symbols:
        print(symbol)
        print("====")
        print("Actual:", testbins[symbol][-days:])
        for order in orders:
            error = run_experiment(bins[symbol], order,
                                   testbins[symbol][-order-days:-days], days,
                                   testbins[symbol][-days:], ntrials)
            print("Order", order, ":", error)
        print()

        
# You may want to keep this call commented out while you're writing & testing
# your code. Uncomment it when you're ready to run the experiments.
# run()